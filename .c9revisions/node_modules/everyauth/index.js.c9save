{"ts":1353871348103,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var connect = require('connect')\n  , __pause = connect.utils.pause\n  , everyauth = module.exports = {};\n\n\neveryauth.helpExpress = function () {\n  console.warn('everyauth.helpExpress is being deprecated. helpExpress is now automatically invoked when it detects express. So remove everyauth.helpExpress from your code');\n  return this;\n}\n\neveryauth.debug = false;\n\n// The connect middleware. e.g.,\n//     connect(\n//         ...\n//       , everyauth.middleware()\n//       , ...\n//     )\neveryauth.middleware = function () {\n  var oldUse = connect.HTTPServer.prototype.use;\n  connect.HTTPServer.prototype.use = function (route, handle) {\n    if (! (handle && handle.everyauth)) {\n      return oldUse.call(this, route, handle);\n    }\n    if (this.set) { /* If the context is an express app */\n      var parentApp = this;\n      // Then decorate the parent app as soon as we mount everyauth as middleware\n      // so that any views accessible from the parent app have dynamic helpers\n      // related to everyauth.\n      var helpers = {}\n        , userAlias = everyauth.expressHelperUserAlias || 'user';\n      helpers.everyauth = function (req, res) {\n        var sess = req.session\n          , auth = sess.auth\n          , ea = { loggedIn: !!(auth && auth.loggedIn) };\n\n        // Copy the session.auth properties over\n        for (var k in auth) {\n          ea[k] = auth[k];\n        }\n\n        if (everyauth.enabled.password) {\n          // Add in access to loginFormFieldName() + passwordFormFieldName()\n          ea.password || (ea.password = {});\n          ea.password.loginFormFieldName = everyauth.password.loginFormFieldName();\n          ea.password.passwordFormFieldName = everyauth.password.passwordFormFieldName();\n        }\n\n        ea.user = req.user;\n\n        return ea;\n      };\n      helpers[userAlias] = function (req, res) {\n        return req.user;\n      };\n      parentApp.dynamicHelpers(helpers);\n    }\n    connect.HTTPServer.prototype.use = oldUse;\n    return this.use(route, handle);\n  };\n\n\n  var app = connect(\n      function registerReqGettersAndMethods (req, res, next) {\n        var methods = everyauth._req._methods\n          , getters = everyauth._req._getters;\n        for (var name in methods) {\n          req[name] = methods[name];\n        }\n        for (name in getters) {\n          Object.defineProperty(req, name, {\n            get: getters[name]\n          });\n        }\n        next();\n      }\n    , function fetchUserFromSession (req, res, next) {\n        var sess = req.session\n          , auth = sess && sess.auth;\n        if (!auth || !auth.userId) return next();\n        var everymodule = everyauth.everymodule;\n        var pause = __pause(req);\n\n        var findUserById_callback = function (err, user) {\n          if (err) {\n            pause.resume();\n            return next(err);\n          }\n          if (user) req.user = user;\n          else delete sess.auth;\n          next();\n          pause.resume();\n        }; \n\n        var findUserById_function = everymodule.findUserById();\n        \n        findUserById_function.length === 3\n          ? findUserById_function( req, auth.userId, findUserById_callback )\n          : findUserById_function(      auth.userId, findUserById_callback );\n\n      }\n    , connect.router(function (app) {\n        var modules = everyauth.enabled\n          , _module;\n        for (var _name in modules) {\n          _module = modules[_name];\n          _module.validateSequences();\n          _module.routeApp(app);\n        }\n      })\n  );\n\n  app.everyauth = true;\n\n  return app;\n};\n\neveryauth._req = {\n    _methods: {}\n  , _getters: {}\n};\n\neveryauth.addRequestMethod = function (name, fn) {\n  this._req._methods[name] = fn;\n  return this;\n};\n\neveryauth.addRequestGetter = function (name, fn, isAsync) {\n  this._req._getters[name] = fn;\n  return this;\n};\n\neveryauth\n  .addRequestMethod('logout', function () {\n    var req = this;\n    delete req.session.auth;\n  })\n  .addRequestGetter('loggedIn', function () {\n    var req = this;\n    return !!(req.session && req.session.auth && req.session.auth.loggedIn);\n  });\n\neveryauth.modules = {};\neveryauth.enabled = {};\n\n// Grab all filenames in ./modules -- They correspond to the modules of the same name\n// as the filename (minus '.js')\nvar fs = require('fs');\nvar files = fs.readdirSync(__dirname + '/lib/modules');\nvar includeModules = files.map( function (fname) {\n  return fname.substring(0, fname.length - 3);\n});\nfor (var i = 0, l = includeModules.length; i < l; i++) {\n  var name = includeModules[i];\n\n  // Lazy enabling of a module via `everyauth` getters\n  // i.e., the `facebook` module is not loaded into memory\n  // until `everyauth.facebook` is evaluated\n  Object.defineProperty(everyauth, name, {\n    get: (function (name) {\n      return function () {\n        var mod = this.modules[name] || (this.modules[name] = require('./lib/modules/' + name));\n        // Make `everyauth` accessible from each auth strategy module\n        if (!mod.everyauth) mod.everyauth = this;\n        if (mod.shouldSetup)\n          this.enabled[name] = mod;\n        return mod;\n      }\n    })(name)\n  });\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":5110}]],"length":5110}
